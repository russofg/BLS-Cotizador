---
import Dashboard from "../../../layouts/Dashboard.astro";
import { cotizacionService, clienteService } from "../../../utils/database";
import { DateHelper } from "../../../utils/dateHelpers";
import { QuoteHelper } from "../../../utils/quoteHelpers";
import ScrollbarStyles from "../../../components/ScrollbarStyles.astro";
import { DEFAULT_QUOTE_TEXTS } from "../../../config/company";

// Valores por defecto para los campos de texto
const defaultObservaciones = DEFAULT_QUOTE_TEXTS.observaciones;
const defaultCondiciones = DEFAULT_QUOTE_TEXTS.condiciones;

const { id } = Astro.params;

let cotizacion: any = null;
let cliente: any = null;
let error = "";

// Usar la función centralizada de formateo de fechas
const safeFormatDate = DateHelper.safeFormatDate;

try {
  if (id) {
    const cotizaciones = await cotizacionService.getAll();
    cotizacion = cotizaciones.find((c: any) => c.id === id);
    
    if (cotizacion) {
      console.log('🔍 Server-side cotizacion object:', JSON.stringify(cotizacion, null, 2));
      
      const clientes = await clienteService.getAll();
      // Check both possible client ID field names for compatibility
      cliente = clientes.find((c: any) => c.id === cotizacion.cliente_id || c.id === cotizacion.clienteId);
      
      // Generate improved quote number using centralized helper
      cotizacion.numeroMejorado = QuoteHelper.generateQuoteNumber(cotizacion, cliente);
    } else {
      error = "Cotización no encontrada";
    }
  } else {
    error = "ID de cotización no proporcionado";
  }
} catch (err) {
  console.error("Error loading quote:", err);
  error = "Error al cargar la cotización";
}

// Normalize items data using centralized helper
let itemsToShow: any[] = [];
if (cotizacion && cotizacion.items) {
  itemsToShow = QuoteHelper.normalizeItems(cotizacion.items);
}
---

<Dashboard title="Ver Cotización - BLS Cotizador" activeSection="quotes">
  <ScrollbarStyles />
  {error ? (
    <div class="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400 dark:text-red-300" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800 dark:text-red-300">Error</h3>
          <div class="mt-2 text-sm text-red-700 dark:text-red-400">
            <p>{error}</p>
          </div>
        </div>
      </div>
    </div>
  ) : cotizacion ? (
    <div class="space-y-6">
      <!-- Header -->
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-4 py-5 sm:px-6">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white break-words">
                {cotizacion.numeroMejorado || cotizacion.numero || `COT-${new Date(cotizacion.created_at).getFullYear()}-${String(cotizacion.id).padStart(3, '0')}`}
              </h1>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                {cotizacion.titulo || 'Sin título'}
              </p>
            </div>
            <div class="flex flex-wrap gap-2">
              <button
                id="export-pdf-btn"
                class="inline-flex items-center justify-center px-3 py-2.5 border border-emerald-300 dark:border-emerald-600 shadow-sm text-sm font-medium rounded-md text-emerald-700 dark:text-emerald-300 bg-emerald-50 dark:bg-emerald-900/20 hover:bg-emerald-100 dark:hover:bg-emerald-900/30 flex-1 sm:flex-none touch-scroll-item transition-colors"
                title="Exportar como PDF"
              >
                <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                PDF
              </button>
              <button
                id="export-excel-btn"
                class="inline-flex items-center justify-center px-3 py-2.5 border border-blue-300 dark:border-blue-600 shadow-sm text-sm font-medium rounded-md text-blue-700 dark:text-blue-300 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 flex-1 sm:flex-none touch-scroll-item transition-colors"
                title="Exportar como Excel"
              >
                <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 0a2 2 0 012 2v6a2 2 0 01-2 2" />
                </svg>
                Excel
              </button>
              <a
                href={`/quotes/edit/${cotizacion.id}`}
                class="inline-flex items-center justify-center px-4 py-2.5 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 flex-1 sm:flex-none touch-scroll-item"
              >
                <svg class="-ml-0.5 mr-1.5 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                </svg>
                Editar
              </a>
              <a
                href="/quotes"
                class="inline-flex items-center justify-center px-4 py-2.5 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 flex-1 sm:flex-none touch-scroll-item"
              >
                Volver a Cotizaciones
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Quote Details -->
      <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">Detalles de la Cotización</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-5">
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Cliente</label>
              <p class="mt-1 text-sm text-gray-900 dark:text-gray-200 font-medium">
                {cliente ? `${cliente.nombre}${cliente.empresa ? ` - ${cliente.empresa}` : ''}` : 'Cliente no encontrado'}
              </p>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Estado</label>
              <p class="mt-1">
                <span class={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
                  cotizacion.estado === 'borrador' ? 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-200' :
                  cotizacion.estado === 'enviado' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' :
                  cotizacion.estado === 'aprobado' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :
                  'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'
                }`}>
                  {cotizacion.estado === 'borrador' ? 'Borrador' :
                   cotizacion.estado === 'enviado' ? 'Enviado' :
                   cotizacion.estado === 'aprobado' ? 'Aprobado' :
                   cotizacion.estado === 'rechazado' ? 'Rechazado' : 'Desconocido'}
                </span>
              </p>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fecha de Inicio del Evento</label>
              <p class="mt-1 text-sm text-gray-900 dark:text-gray-200 font-medium">
                {cotizacion.fecha_evento ? safeFormatDate(cotizacion.fecha_evento) : 
                 cotizacion.fechaEvento ? safeFormatDate(cotizacion.fechaEvento) : 'No especificada'}
              </p>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fecha de Fin del Evento</label>
              <p class="mt-1 text-sm text-gray-900 dark:text-gray-200 font-medium">
                {cotizacion.fecha_evento_fin ? safeFormatDate(cotizacion.fecha_evento_fin) : 
                 cotizacion.fechaEventoFin ? safeFormatDate(cotizacion.fechaEventoFin) : 
                 (cotizacion.fecha_evento ? safeFormatDate(cotizacion.fecha_evento) :
                  cotizacion.fechaEvento ? safeFormatDate(cotizacion.fechaEvento) : 'No especificada')}
              </p>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Lugar del Evento</label>
              <p class="mt-1 text-sm text-gray-900 dark:text-gray-200 font-medium">
                {cotizacion.lugar_evento || 'No especificado'}
              </p>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Duración del Evento</label>
              <div class="mt-1 flex flex-wrap items-center gap-2">
                <span class="text-sm text-gray-900 dark:text-gray-200 font-medium">
                  {cotizacion.duracion_dias || (cotizacion.duracion_horas ? Math.ceil(cotizacion.duracion_horas/24) : 1)} día(s)
                </span>
                {cotizacion.requiere_armado && 
                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                    + Día de armado previo
                  </span>
                }
              </div>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Armado Previo</label>
              <div class="mt-1">
                {cotizacion.requiere_armado ? (
                  <div class="flex items-center text-sm text-gray-900 dark:text-gray-200">
                    <svg class="h-5 w-5 text-green-500 dark:text-green-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span>Incluye día de armado previo al evento</span>
                  </div>
                ) : (
                  <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                    <svg class="h-5 w-5 text-gray-400 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    <span>No requiere día de armado previo</span>
                  </div>
                )}
              </div>
            </div>
            
            <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Total</label>
              <p class="mt-1 text-lg font-semibold text-primary-600 dark:text-primary-400">
                ${(cotizacion.total || 0).toLocaleString('es-AR')}
              </p>
            </div>
            
            {cotizacion.descripcion && (
              <div class="md:col-span-2 bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Descripción</label>
                <p class="mt-1 text-sm text-gray-900 dark:text-gray-200">{cotizacion.descripcion}</p>
              </div>
            )}
            
            {cotizacion.observaciones && (
              <div class="md:col-span-2 bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Observaciones</label>
                <p class="mt-1 text-sm text-gray-900 dark:text-gray-200">{cotizacion.observaciones}</p>
              </div>
            )}
            
            {(cotizacion.condiciones || cotizacion.condiciones === '') && (
              <div class="md:col-span-2 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-md border border-blue-200 dark:border-blue-800">
                <label class="block text-sm font-medium text-blue-700 dark:text-blue-300">Condiciones Comerciales</label>
                <p class="mt-1 text-sm text-gray-900 dark:text-gray-200 whitespace-pre-wrap">
                  {cotizacion.condiciones || defaultCondiciones}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Items Section -->
      {itemsToShow.length > 0 ? (
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">Items de la Cotización</h3>
            
            <!-- Desktop table (hidden on small screens) -->
            <div class="hidden sm:block overflow-x-auto custom-scrollbar">
              <table class="min-w-full divide-y divide-gray-300 dark:divide-gray-600">
                <thead>
                  <tr>
                    <th class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300">
                      Descripción
                    </th>
                    <th class="px-3 py-3.5 text-center text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300">
                      Cantidad
                    </th>
                    <th class="px-3 py-3.5 text-right text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300">
                      Precio Unit.
                    </th>
                    <th class="px-3 py-3.5 text-right text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300">
                      Total
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-600">
                  {itemsToShow.map((item: any) => {
                    // Prioritize nombre over descripcion, then fallback to other fields
                    let itemName = item.nombre || item.name || '';
                    let itemDescription = '';
                    
                    // Handle array descriptions (from real catalog items)
                    if (Array.isArray(item.descripcion)) {
                      itemDescription = item.descripcion.join(', ');
                    } else {
                      itemDescription = item.descripcion || '';
                    }
                    
                    // Ensure we're working with strings
                    itemName = String(itemName || '').trim();
                    itemDescription = String(itemDescription || '').trim();
                    
                    // Build display text with name in bold and description below
                    let displayText = '';
                    
                    if (itemName) {
                      displayText = `<strong class="dark:text-white">${itemName}</strong>`;
                      if (itemDescription && itemDescription !== itemName) {
                        displayText += `<br><span class="text-gray-600 dark:text-gray-400">${itemDescription}</span>`;
                      }
                    } else if (itemDescription) {
                      // If no name, just show description
                      displayText = `<span class="dark:text-white">${itemDescription}</span>`;
                    } else {
                      displayText = '<span class="dark:text-white">Item sin descripción</span>';
                    }
                    
                    const cantidad = item.cantidad || item.quantity || 1;
                    const precioUnitario = item.precio_unitario || item.precio || item.price || 0;
                    const total = item.total || (cantidad * precioUnitario);
                    
                    return (
                      <tr>
                        <td class="px-3 py-4 text-sm text-gray-900 dark:text-white" set:html={displayText}></td>
                        <td class="px-3 py-4 text-sm text-gray-900 dark:text-white text-center">{cantidad}</td>
                        <td class="px-3 py-4 text-sm text-gray-900 dark:text-white text-right font-medium">${precioUnitario.toLocaleString('es-AR')}</td>
                        <td class="px-3 py-4 text-sm text-gray-900 dark:text-white text-right font-semibold">${total.toLocaleString('es-AR')}</td>
                      </tr>
                    );
                  })}
                </tbody>
                <tfoot class="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <td colspan="3" class="px-3 py-3 text-sm font-medium text-gray-900 dark:text-white text-right">Subtotal:</td>
                    <td class="px-3 py-3 text-sm font-semibold text-gray-900 dark:text-white text-right">${(cotizacion.subtotal || 0).toLocaleString('es-AR')}</td>
                  </tr>
                  {cotizacion.descuento > 0 && (
                    <tr>
                      <td colspan="3" class="px-3 py-3 text-sm font-medium text-gray-900 dark:text-white text-right">Descuento ({cotizacion.descuento}%):</td>
                      <td class="px-3 py-3 text-sm font-semibold text-red-600 dark:text-red-400 text-right">-${((cotizacion.subtotal || 0) * (cotizacion.descuento / 100)).toLocaleString('es-AR')}</td>
                    </tr>
                  )}
                  <tr class="border-t-2 border-gray-300 dark:border-gray-600">
                    <td colspan="3" class="px-3 py-3 text-base font-bold text-gray-900 dark:text-white text-right">Total:</td>
                    <td class="px-3 py-3 text-base font-bold text-primary-600 dark:text-primary-400 text-right">${(cotizacion.total || 0).toLocaleString('es-AR')}</td>
                  </tr>
                </tfoot>
              </table>
            </div>
            
            <!-- Mobile card view (visible only on small screens) -->
            <div class="sm:hidden space-y-4">
              {itemsToShow.map((item: any) => {
                // Prioritize nombre over descripcion, then fallback to other fields
                let itemName = item.nombre || item.name || '';
                let itemDescription = '';
                
                // Handle array descriptions (from real catalog items)
                if (Array.isArray(item.descripcion)) {
                  itemDescription = item.descripcion.join(', ');
                } else {
                  itemDescription = item.descripcion || '';
                }
                
                // Ensure we're working with strings
                itemName = String(itemName || '').trim();
                itemDescription = String(itemDescription || '').trim();
                
                const cantidad = item.cantidad || item.quantity || 1;
                const precioUnitario = item.precio_unitario || item.precio || item.price || 0;
                const total = item.total || (cantidad * precioUnitario);
                
                return (
                  <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-md shadow-sm">
                    {itemName && (
                      <h4 class="font-medium text-gray-900 dark:text-gray-200 mb-1">{itemName}</h4>
                    )}
                    {itemDescription && itemDescription !== itemName && (
                      <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">{itemDescription}</p>
                    )}
                    <div class="grid grid-cols-3 gap-2 mt-3">
                      <div>
                        <span class="block text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">Cantidad</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{cantidad}</span>
                      </div>
                      <div>
                        <span class="block text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">Precio Unit.</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">${precioUnitario.toLocaleString('es-AR')}</span>
                      </div>
                      <div>
                        <span class="block text-xs font-medium text-gray-500 dark:text-gray-400 uppercase">Total</span>
                        <span class="text-sm font-semibold text-primary-600 dark:text-primary-400">${total.toLocaleString('es-AR')}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
              
              <!-- Mobile Totals -->
              <div class="mt-6 bg-gray-50 dark:bg-gray-700 p-4 rounded-md">
                <div class="flex justify-between items-center mb-2">
                  <span class="text-sm font-medium text-gray-900 dark:text-white">Subtotal:</span>
                  <span class="text-sm font-semibold text-gray-900 dark:text-white">${(cotizacion.subtotal || 0).toLocaleString('es-AR')}</span>
                </div>
                
                {cotizacion.descuento > 0 && (
                  <div class="flex justify-between items-center mb-2">
                    <span class="text-sm font-medium text-gray-900 dark:text-white">Descuento ({cotizacion.descuento}%):</span>
                    <span class="text-sm font-semibold text-red-600 dark:text-red-400">-${((cotizacion.subtotal || 0) * (cotizacion.descuento / 100)).toLocaleString('es-AR')}</span>
                  </div>
                )}
                
                <div class="flex justify-between items-center pt-2 border-t border-gray-300 dark:border-gray-600">
                  <span class="text-base font-bold text-gray-900 dark:text-white">Total:</span>
                  <span class="text-base font-bold text-primary-600 dark:text-primary-400">${(cotizacion.total || 0).toLocaleString('es-AR')}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">Items de la Cotización</h3>
            <div class="text-center py-10">
              <div class="w-16 h-16 mx-auto mb-4 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center">
                <svg class="w-8 h-8 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                </svg>
              </div>
              <p class="text-center text-gray-500 dark:text-gray-400">No hay items en esta cotización</p>
            </div>
          </div>
        </div>
      )}
    </div>
  ) : (
    <div class="text-center py-12">
      <p class="text-gray-500 dark:text-gray-400">Cargando cotización...</p>
    </div>
  )}
</Dashboard>

<script define:vars={{ cotizacion, cliente, itemsToShow, defaultObservaciones, defaultCondiciones }}>
  // Make data available globally for export functions
  window.cotizacion = cotizacion;
  window.cliente = cliente;
  window.itemsToShow = itemsToShow;
  window.defaultObservaciones = defaultObservaciones;
  window.defaultCondiciones = defaultCondiciones;
</script>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    // Configuración de la empresa (sincronizada con /src/config/company.ts)
    const empresaInfo = {
      nombre: 'BLS Servicios Audiovisuales',
      direccion: 'Catamarca 809, CABA, Argentina',
      telefono: '+54 11 5183 4646',
      email: 'info@blsnet.com.ar',
      website: 'www.blsnet.com.ar'
    };

    // Get cotization data from the page (these are available as global variables)
    const getCotizacionData = () => {
      const cotizacionData = (window as any).cotizacion || {};
      const clienteData = (window as any).cliente || {};
      const itemsData = (window as any).itemsToShow || [];
      const defaultObs = (window as any).defaultObservaciones || '';
      const defaultCond = (window as any).defaultCondiciones || '';
      console.log('🔍 Debug detailed items:', JSON.stringify(itemsData, null, 2));
      
      return {
        cotizacion: cotizacionData,
        cliente: clienteData,
        items: itemsData,
        defaultObservaciones: defaultObs,
        defaultCondiciones: defaultCond
      };
    };

    // Export PDF handler
    document.getElementById('export-pdf-btn')?.addEventListener('click', async () => {
      try {
        const { exportService } = await import("../../../utils/export");
        const { notifications } = await import("../../../utils/notifications");
        
        const data = getCotizacionData();
        if (!data.cotizacion || !data.cotizacion.id) {
          notifications.error('Error', 'No se pudo obtener los datos de la cotización');
          return;
        }
        
        // Prepare export data matching the expected interface
        const exportData = {
          cotizacion: {
            numero: data.cotizacion.numeroMejorado || data.cotizacion.numero || 'Sin número',
            titulo: data.cotizacion.titulo || 'Sin título',
            descripcion: data.cotizacion.descripcion || '',
            fecha_evento: (() => {
              // Use the same safe date formatting logic for fecha_evento
              const fechaInicio = data.cotizacion.fecha_evento || data.cotizacion.fechaEvento;
              if (fechaInicio) {
                try {
                  // Handle Firebase Timestamp objects
                  if (fechaInicio && typeof fechaInicio === 'object' && fechaInicio.toDate) {
                    const date = fechaInicio.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle Firebase Timestamp objects with seconds property
                  if (fechaInicio && typeof fechaInicio === 'object' && typeof fechaInicio.seconds === 'number') {
                    const date = new Date(fechaInicio.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle string dates
                  if (typeof fechaInicio === 'string') {
                    if (fechaInicio.includes('/')) return fechaInicio; // Already formatted
                    
                    let dateToFormat;
                    if (fechaInicio.includes('T') || fechaInicio.includes('Z')) {
                      dateToFormat = new Date(fechaInicio);
                    } else {
                      dateToFormat = new Date(fechaInicio + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  // Try to create a Date object for other types
                  const date = new Date(fechaInicio);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento for PDF:', fechaInicio, error);
                }
              }
              return ''; // Return empty string if no valid date found
            })(),
            fecha_evento_fin: (() => {
              // Use the same safe date formatting logic from the server side
              const fechaFin = data.cotizacion.fecha_evento_fin || data.cotizacion.fechaEventoFin;
              if (fechaFin) {
                try {
                  // Handle Firebase Timestamp objects
                  if (fechaFin && typeof fechaFin === 'object' && fechaFin.toDate) {
                    const date = fechaFin.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle Firebase Timestamp objects with seconds property
                  if (fechaFin && typeof fechaFin === 'object' && typeof fechaFin.seconds === 'number') {
                    const date = new Date(fechaFin.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle string dates
                  if (typeof fechaFin === 'string') {
                    if (fechaFin.includes('/')) return fechaFin; // Already formatted
                    
                    let dateToFormat;
                    if (fechaFin.includes('T') || fechaFin.includes('Z')) {
                      dateToFormat = new Date(fechaFin);
                    } else {
                      dateToFormat = new Date(fechaFin + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  // Try to create a Date object for other types
                  const date = new Date(fechaFin);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento_fin for PDF:', fechaFin, error);
                }
              }
              
              // Fallback to fecha_evento if fecha_evento_fin is not available
              const fechaInicio = data.cotizacion.fecha_evento || data.cotizacion.fechaEvento;
              if (fechaInicio) {
                try {
                  // Apply same formatting logic to fecha_evento as fallback
                  if (fechaInicio && typeof fechaInicio === 'object' && fechaInicio.toDate) {
                    const date = fechaInicio.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  if (fechaInicio && typeof fechaInicio === 'object' && typeof fechaInicio.seconds === 'number') {
                    const date = new Date(fechaInicio.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  if (typeof fechaInicio === 'string') {
                    if (fechaInicio.includes('/')) return fechaInicio;
                    
                    let dateToFormat;
                    if (fechaInicio.includes('T') || fechaInicio.includes('Z')) {
                      dateToFormat = new Date(fechaInicio);
                    } else {
                      dateToFormat = new Date(fechaInicio + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  const date = new Date(fechaInicio);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento as fallback for PDF:', fechaInicio, error);
                }
              }
              
              return ''; // Return empty string if no valid date found
            })(),
            lugar_evento: data.cotizacion.lugar_evento || '',
            duracion_horas: data.cotizacion.duracion_horas || (data.cotizacion.duracion_dias * 24) || 24,
            duracion_dias: data.cotizacion.duracion_dias || Math.ceil((data.cotizacion.duracion_horas || 24) / 24),
            requiere_armado: data.cotizacion.requiere_armado || false,
            subtotal: parseFloat(data.cotizacion.subtotal) || 0,
            descuento: parseFloat(data.cotizacion.descuentoGeneral || data.cotizacion.descuento) || 0,
            total: parseFloat(data.cotizacion.total) || 0,
            observaciones: data.cotizacion.observaciones || 'Este presupuesto incluye nuestro SISTEMA DE COBERTURA DE BACK ESTRUCTURAL para equipo técnico.\n\nLos importes detallados no incluyen I.V.A.',
            condiciones: data.cotizacion.condiciones || 'Validez de la oferta: La validez de esta oferta es de 20 días.\n\nNOTA IMPORTANTE\n\nLOS VALORES ESTAN CONTEMPLADOS AL MES DE NOVIEMBRE DE 2024\n\nSERAN AJUSTADOS MENSUALMENTE SEGÚN IPC (INDICE DE PRECIOS AL CONSUMIDOR)\n\nCondiciones de Pago y confirmación del servicio:\n\nEl pago deberá cancelarse de la siguiente manera: 50% como reserva del equipamiento y el saldo restante a 10 días del evento. Podrá efectuarse en efectivo, transferencia bancaria o mediante la emisión de cheque. \nPor favor remitir datos de la empresa y contacto de pago a proveedores para una correcta facturación. \n\nCancelación de los servicios:\n\nSin cargo hasta 48 Hs antes del evento.\nSi se cancela 24 Hs. antes se deberá abonar el 50% del total del presupuesto.\nTodos los adicionales que no se encuentren cotizados en el presente presupuesto serán cotizados por separado y serán incluidos en la facturación al momento del detalle final. \n\nCondiciones de reserva:\n\nLa confirmación del evento por parte de BLS – Servicios Audiovisuales dependerá de la disponibilidad del servicio al momento de la aceptación formal del presupuesto por parte del cliente.',
            vigencia_dias: data.cotizacion.vigencia_dias || 30,
            created_at: data.cotizacion.created_at || new Date().toISOString(),
            estado: data.cotizacion.estado || 'pendiente'
          },
          cliente: {
            nombre: data.cliente?.nombre || 'Cliente sin nombre',
            empresa: data.cliente?.empresa || '',
            email: data.cliente?.email || '',
            telefono: data.cliente?.telefono || '',
            direccion: data.cliente?.direccion || ''
          },
          items: (data.items || []).map((item: any) => {
            const cantidad = parseFloat(item.cantidad || item.quantity) || 1;
            const precioUnitario = parseFloat(item.precio_unitario || item.precio || item.price) || 0;
            const descuento = parseFloat(item.descuento || item.discount) || 0;
            const subtotalItem = parseFloat(item.total || item.subtotal) || (cantidad * precioUnitario * (1 - descuento/100));
            
            return {
              nombre: item.nombre || item.name || 'Artículo sin nombre',
              descripcion: Array.isArray(item.descripcion) ? item.descripcion : (item.descripcion ? [item.descripcion] : []),
              cantidad: cantidad,
              precio_unitario: precioUnitario,
              descuento: descuento,
              subtotal: subtotalItem,
              unidad: item.unidad || item.unit || 'und',
              observaciones: item.observaciones || item.notes || ''
            };
          }),
          empresa: empresaInfo
        };
        
        await exportService.exportCotizacion(exportData, 'pdf');
        
      } catch (error) {
        console.error('Export PDF error:', error);
        const { notifications } = await import("../../../utils/notifications");
        notifications.error('Error', 'Error al exportar PDF: ' + (error instanceof Error ? error.message : 'Error desconocido'));
      }
    });

    // Export Excel handler
    document.getElementById('export-excel-btn')?.addEventListener('click', async () => {
      try {
        const { exportService } = await import("../../../utils/export");
        const { notifications } = await import("../../../utils/notifications");
        
        const data = getCotizacionData();
        if (!data.cotizacion || !data.cotizacion.id) {
          notifications.error('Error', 'No se pudo obtener los datos de la cotización');
          return;
        }
        
        // Prepare export data matching the expected interface (same as PDF)
        const exportData = {
          cotizacion: {
            numero: data.cotizacion.numeroMejorado || data.cotizacion.numero || 'Sin número',
            titulo: data.cotizacion.titulo || 'Sin título',
            descripcion: data.cotizacion.descripcion || '',
            fecha_evento: (() => {
              // Use the same safe date formatting logic for fecha_evento
              const fechaInicio = data.cotizacion.fecha_evento || data.cotizacion.fechaEvento;
              if (fechaInicio) {
                try {
                  // Handle Firebase Timestamp objects
                  if (fechaInicio && typeof fechaInicio === 'object' && fechaInicio.toDate) {
                    const date = fechaInicio.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle Firebase Timestamp objects with seconds property
                  if (fechaInicio && typeof fechaInicio === 'object' && typeof fechaInicio.seconds === 'number') {
                    const date = new Date(fechaInicio.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle string dates
                  if (typeof fechaInicio === 'string') {
                    if (fechaInicio.includes('/')) return fechaInicio; // Already formatted
                    
                    let dateToFormat;
                    if (fechaInicio.includes('T') || fechaInicio.includes('Z')) {
                      dateToFormat = new Date(fechaInicio);
                    } else {
                      dateToFormat = new Date(fechaInicio + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  // Try to create a Date object for other types
                  const date = new Date(fechaInicio);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento for Excel:', fechaInicio, error);
                }
              }
              return ''; // Return empty string if no valid date found
            })(),
            fecha_evento_fin: (() => {
              // Use the same safe date formatting logic from the server side
              const fechaFin = data.cotizacion.fecha_evento_fin || data.cotizacion.fechaEventoFin;
              if (fechaFin) {
                try {
                  // Handle Firebase Timestamp objects
                  if (fechaFin && typeof fechaFin === 'object' && fechaFin.toDate) {
                    const date = fechaFin.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle Firebase Timestamp objects with seconds property
                  if (fechaFin && typeof fechaFin === 'object' && typeof fechaFin.seconds === 'number') {
                    const date = new Date(fechaFin.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  // Handle string dates
                  if (typeof fechaFin === 'string') {
                    if (fechaFin.includes('/')) return fechaFin; // Already formatted
                    
                    let dateToFormat;
                    if (fechaFin.includes('T') || fechaFin.includes('Z')) {
                      dateToFormat = new Date(fechaFin);
                    } else {
                      dateToFormat = new Date(fechaFin + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  // Try to create a Date object for other types
                  const date = new Date(fechaFin);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento_fin for Excel:', fechaFin, error);
                }
              }
              
              // Fallback to fecha_evento if fecha_evento_fin is not available
              const fechaInicio = data.cotizacion.fecha_evento || data.cotizacion.fechaEvento;
              if (fechaInicio) {
                try {
                  // Apply same formatting logic to fecha_evento as fallback
                  if (fechaInicio && typeof fechaInicio === 'object' && fechaInicio.toDate) {
                    const date = fechaInicio.toDate();
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  if (fechaInicio && typeof fechaInicio === 'object' && typeof fechaInicio.seconds === 'number') {
                    const date = new Date(fechaInicio.seconds * 1000);
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                  
                  if (typeof fechaInicio === 'string') {
                    if (fechaInicio.includes('/')) return fechaInicio;
                    
                    let dateToFormat;
                    if (fechaInicio.includes('T') || fechaInicio.includes('Z')) {
                      dateToFormat = new Date(fechaInicio);
                    } else {
                      dateToFormat = new Date(fechaInicio + 'T12:00:00');
                    }
                    
                    if (!isNaN(dateToFormat.getTime())) {
                      const day = dateToFormat.getDate().toString().padStart(2, '0');
                      const month = (dateToFormat.getMonth() + 1).toString().padStart(2, '0');
                      const year = dateToFormat.getFullYear();
                      return `${day}/${month}/${year}`;
                    }
                  }
                  
                  const date = new Date(fechaInicio);
                  if (!isNaN(date.getTime())) {
                    const day = date.getDate().toString().padStart(2, '0');
                    const month = (date.getMonth() + 1).toString().padStart(2, '0');
                    const year = date.getFullYear();
                    return `${day}/${month}/${year}`;
                  }
                } catch (error) {
                  console.error('Error formatting fecha_evento as fallback for Excel:', fechaInicio, error);
                }
              }
              
              return ''; // Return empty string if no valid date found
            })(),
            lugar_evento: data.cotizacion.lugar_evento || '',
            duracion_horas: data.cotizacion.duracion_horas || (data.cotizacion.duracion_dias * 24) || 24,
            duracion_dias: data.cotizacion.duracion_dias || Math.ceil((data.cotizacion.duracion_horas || 24) / 24),
            requiere_armado: data.cotizacion.requiere_armado || false,
            subtotal: parseFloat(data.cotizacion.subtotal) || 0,
            descuento: parseFloat(data.cotizacion.descuentoGeneral || data.cotizacion.descuento) || 0,
            total: parseFloat(data.cotizacion.total) || 0,
            observaciones: data.cotizacion.observaciones || 'Este presupuesto incluye nuestro SISTEMA DE COBERTURA DE BACK ESTRUCTURAL para equipo técnico.\n\nLos importes detallados no incluyen I.V.A.',
            condiciones: data.cotizacion.condiciones || 'Validez de la oferta: La validez de esta oferta es de 20 días.\n\nNOTA IMPORTANTE\n\nLOS VALORES ESTAN CONTEMPLADOS AL MES DE NOVIEMBRE DE 2024\n\nSERAN AJUSTADOS MENSUALMENTE SEGÚN IPC (INDICE DE PRECIOS AL CONSUMIDOR)\n\nCondiciones de Pago y confirmación del servicio:\n\nEl pago deberá cancelarse de la siguiente manera: 50% como reserva del equipamiento y el saldo restante a 10 días del evento. Podrá efectuarse en efectivo, transferencia bancaria o mediante la emisión de cheque. \nPor favor remitir datos de la empresa y contacto de pago a proveedores para una correcta facturación. \n\nCancelación de los servicios:\n\nSin cargo hasta 48 Hs antes del evento.\nSi se cancela 24 Hs. antes se deberá abonar el 50% del total del presupuesto.\nTodos los adicionales que no se encuentren cotizados en el presente presupuesto serán cotizados por separado y serán incluidos en la facturación al momento del detalle final. \n\nCondiciones de reserva:\n\nLa confirmación del evento por parte de BLS – Servicios Audiovisuales dependerá de la disponibilidad del servicio al momento de la aceptación formal del presupuesto por parte del cliente.',
            vigencia_dias: data.cotizacion.vigencia_dias || 30,
            created_at: data.cotizacion.created_at || new Date().toISOString(),
            estado: data.cotizacion.estado || 'pendiente'
          },
          cliente: {
            nombre: data.cliente?.nombre || 'Cliente sin nombre',
            empresa: data.cliente?.empresa || '',
            email: data.cliente?.email || '',
            telefono: data.cliente?.telefono || '',
            direccion: data.cliente?.direccion || ''
          },
          items: (data.items || []).map((item: any) => {
            const cantidad = parseFloat(item.cantidad || item.quantity) || 1;
            const precioUnitario = parseFloat(item.precio_unitario || item.precio || item.price) || 0;
            const descuento = parseFloat(item.descuento || item.discount) || 0;
            const subtotalItem = parseFloat(item.total || item.subtotal) || (cantidad * precioUnitario * (1 - descuento/100));
            
            return {
              nombre: item.nombre || item.name || 'Artículo sin nombre',
              descripcion: Array.isArray(item.descripcion) ? item.descripcion : (item.descripcion ? [item.descripcion] : []),
              cantidad: cantidad,
              precio_unitario: precioUnitario,
              descuento: descuento,
              subtotal: subtotalItem,
              unidad: item.unidad || item.unit || 'und',
              observaciones: item.observaciones || item.notes || ''
            };
          }),
          empresa: empresaInfo
        };
        
        await exportService.exportCotizacion(exportData, 'excel');
        
      } catch (error) {
        console.error('Export Excel error:', error);
        const { notifications } = await import("../../../utils/notifications");
        notifications.error('Error', 'Error al exportar Excel: ' + (error instanceof Error ? error.message : 'Error desconocido'));
      }
    });
    
    console.log('✅ Export buttons initialized');
  });
</script>
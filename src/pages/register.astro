---
import Base from "../layouts/Base.astro";
import Button from "../components/ui/Button.astro";
import Input from "../components/ui/Input.astro";
import { ValidationHelper } from "../utils/validationHelpers";
---

<Base title="Registro - BLS Cotizador">
  <div
    class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8"
  >
    <div class="max-w-md w-full space-y-8">
      <div>
        <div class="flex justify-center">
          <svg
            class="h-12 w-12 text-primary-600"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Crear nueva cuenta
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Únete al sistema de cotizaciones BLS
        </p>
      </div>

      <form id="register-form" class="mt-8 space-y-6">
        <div class="space-y-4">
          <!-- Nombre completo -->
          <Input
            id="full-name"
            name="nombre"
            type="text"
            required
            label="Nombre completo"
            placeholder="Ej: Juan Pérez"
          />

          <!-- Email -->
          <Input
            id="email-address"
            name="email"
            type="email"
            required
            label="Dirección de email"
            placeholder="Ej: juan@empresa.com"
          />

          <!-- Contraseña -->
          <div>
            <Input
              id="password"
              name="password"
              type="password"
              required
              label="Contraseña"
              placeholder="Mínimo 6 caracteres"
            />
            <p class="mt-1 text-sm text-gray-500">
              La contraseña debe tener al menos 6 caracteres
            </p>
          </div>

          <!-- Confirmar contraseña -->
          <Input
            id="confirm-password"
            name="confirmPassword"
            type="password"
            required
            label="Confirmar contraseña"
            placeholder="Repite tu contraseña"
          />
        </div>

        <!-- Términos y condiciones -->
        <div class="flex items-center">
          <input
            id="accept-terms"
            name="acceptTerms"
            type="checkbox"
            required
            class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label for="accept-terms" class="ml-2 block text-sm text-gray-900">
            Acepto los
            <a href="#" class="text-primary-600 hover:text-primary-500"
              >términos y condiciones</a
            >
            y la
            <a href="#" class="text-primary-600 hover:text-primary-500"
              >política de privacidad</a
            >
          </label>
        </div>

        <div>
          <Button
            id="register-button"
            type="submit"
            variant="primary"
            size="lg"
            class="w-full"
          >
            <span id="register-text">Crear cuenta</span>
          </Button>
        </div>

        <!-- Login link -->
        <div class="text-center">
          <p class="text-sm text-gray-600">
            ¿Ya tienes una cuenta?
            <a
              href="/login"
              class="font-medium text-primary-600 hover:text-primary-500 transition-colors"
            >
              Inicia sesión aquí
            </a>
          </p>
        </div>

        <!-- Info sobre el proceso -->
        <div class="rounded-md bg-blue-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg
                class="h-5 w-5 text-blue-400"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                  clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-blue-800">
                Información importante
              </h3>
              <div class="mt-2 text-sm text-blue-700">
                <p>
                  Las nuevas cuentas requieren aprobación del administrador.
                </p>
                <p class="mt-1">
                  Recibirás un email cuando tu cuenta sea activada.
                </p>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</Base>

<script>
  import { authService } from "../utils/auth";
  import { notifications } from "../utils/notifications.js";
  import { ValidationHelper } from "../utils/validationHelpers";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("register-form") as HTMLFormElement;

    // Check if already authenticated
    authService.isAuthenticated().then((isAuth) => {
      if (isAuth) {
        window.location.href = "/dashboard";
      }
    });

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const nombre = formData.get("nombre") as string;
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;
      const confirmPassword = formData.get("confirmPassword") as string;
      const acceptTerms = formData.has("acceptTerms");

      // Use centralized validation
      const validation = ValidationHelper.validateUserRegistration({
        nombre: nombre?.trim() || "",
        email: email?.trim() || "",
        password,
        confirmPassword,
        aceptaTerminos: acceptTerms,
      });

      if (!validation.isValid) {
        notifications.error(
          "Errores en el formulario",
          validation.errors.join("\n")
        );
        return;
      }

      try {
        // Show loading notification
        notifications.loading("Creando cuenta", "Registrando usuario...");

        const { user, error } = await authService.signUp(
          email,
          password,
          nombre.trim()
        );

        if (error) {
          throw new Error(error.message);
        }

        if (user) {
          // Show success message
          await notifications.success(
            "¡Registro exitoso!",
            "Tu cuenta ha sido creada. Serás redirigido al dashboard."
          );

          // Wait a bit more to ensure Firestore data is saved
          setTimeout(() => {
            window.location.href = "/dashboard";
          }, 2000);
        }
      } catch (error) {
        console.error("Registration error:", error);
        let errorMessage = "Error en el registro";

        if (error instanceof Error) {
          // Traducir códigos de error de Firebase a mensajes amigables
          const errorCode = error.message;

          if (errorCode.includes("email-already-in-use")) {
            errorMessage =
              "Este email ya está registrado. Intenta iniciar sesión.";
          } else if (errorCode.includes("weak-password")) {
            errorMessage =
              "La contraseña es muy débil. Usa al menos 6 caracteres.";
          } else if (errorCode.includes("invalid-email")) {
            errorMessage = "El formato del email no es válido";
          } else if (errorCode.includes("operation-not-allowed")) {
            errorMessage =
              "El registro no está habilitado. Contacta al administrador.";
          } else if (errorCode.includes("network-request-failed")) {
            errorMessage = "Error de conexión. Verifica tu internet";
          } else {
            // Para cualquier otro error de Firebase, mostrar mensaje genérico
            errorMessage = "Error en el registro. Intenta nuevamente.";
          }
        }

        notifications.error("Error de registro", errorMessage);
      }
    });

    // Validación en tiempo real de contraseñas
    const passwordInput = document.getElementById(
      "password"
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
      "confirm-password"
    ) as HTMLInputElement;

    function validatePasswordMatch() {
      if (passwordInput.value && confirmPasswordInput.value) {
        const validation = ValidationHelper.validatePasswordMatch(
          passwordInput.value,
          confirmPasswordInput.value
        );

        if (!validation.isValid) {
          confirmPasswordInput.setCustomValidity(validation.errors[0]);
        } else {
          confirmPasswordInput.setCustomValidity("");
        }
      }
    }

    passwordInput?.addEventListener("input", validatePasswordMatch);
    confirmPasswordInput?.addEventListener("input", validatePasswordMatch);
  });
</script>

<style>
  input:invalid {
    border-color: #f87171;
  }

  input:valid {
    border-color: #d1d5db;
  }

  .transition-colors {
    transition: color 0.2s ease-in-out;
  }
</style>

---
import Dashboard from "../layouts/Dashboard.astro";
import PageHeader from "../components/ui/PageHeader.astro";
import StatCard from "../components/ui/StatCard.astro";
import Button from "../components/ui/Button.astro";
import Input from "../components/ui/Input.astro";
import Select from "../components/ui/Select.astro";
import Textarea from "../components/ui/Textarea.astro";
import ScrollbarStyles from "../components/ScrollbarStyles.astro";
---

<Dashboard title="Clientes - BLS Cotizador" activeSection="clients">
  <ScrollbarStyles />
  <div class="space-y-6">
    <!-- Header -->
    <PageHeader
      title="Gestión de Clientes"
      subtitle="Administra la base de datos de clientes y venues"
    >
      <div slot="actions" class="flex space-x-3">
        <Button id="refresh-btn" variant="secondary" size="md">
          <svg
            class="-ml-1 mr-2 h-4 w-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
            ></path>
          </svg>
          Actualizar
        </Button>
        <Button id="add-client-btn" variant="primary" size="md">
          <svg
            class="-ml-1 mr-2 h-4 w-4"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Nuevo Cliente
        </Button>
      </div>
    </PageHeader>

    <!-- Statistics -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <StatCard
        title="Total Clientes"
        value="0"
        valueId="total-clients"
        icon="users"
        color="blue"
      />

      <StatCard
        title="Clientes Activos"
        value="0"
        valueId="active-clients"
        icon="check-circle"
        color="green"
      />

      <StatCard
        title="Con Cotizaciones"
        value="0"
        valueId="clients-with-quotes"
        icon="document-check"
        color="purple"
      />

      <StatCard
        title="Últimos 30 días"
        value="0"
        valueId="recent-clients"
        icon="calendar"
        color="yellow"
      />
    </div>

    <!-- Filters -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-6">
      <div class="px-4 py-4 sm:px-6">
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          <Input id="search" placeholder="Buscar clientes..." label="Buscar" />
          <Select
            id="status"
            label="Estado"
            options={[
              { value: "", label: "Todos" },
              { value: "active", label: "Activos" },
              { value: "inactive", label: "Inactivos" },
            ]}
          />
          <Input
            id="company"
            placeholder="Filtrar por empresa..."
            label="Empresa"
          />
          <div class="flex items-end">
            <button
              type="button"
              id="clear-filters"
              class="w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-3 py-3 sm:py-2 text-sm font-medium text-gray-700 dark:text-gray-300 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 touch-scroll-item"
            >
              Limpiar
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Clients Table/Cards Container -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <!-- Desktop Table View (hidden on mobile) -->
        <div class="hidden sm:block">
          <div class="flow-root">
            <div
              class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8 custom-scrollbar"
            >
              <div
                class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8"
              >
                <table
                  class="min-w-full divide-y divide-gray-300 dark:divide-gray-600"
                >
                  <thead>
                    <tr>
                      <th
                        scope="col"
                        class="py-3.5 pl-4 pr-3 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300 sm:pl-0"
                      >
                        Cliente
                      </th>
                      <th
                        scope="col"
                        class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300"
                      >
                        Empresa
                      </th>
                      <th
                        scope="col"
                        class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300"
                      >
                        Contacto
                      </th>
                      <th
                        scope="col"
                        class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300"
                      >
                        Cotizaciones
                      </th>
                      <th
                        scope="col"
                        class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300"
                      >
                        Estado
                      </th>
                      <th
                        scope="col"
                        class="px-3 py-3.5 text-left text-xs font-medium uppercase tracking-wide text-gray-500 dark:text-gray-300"
                      >
                        Acciones
                      </th>
                    </tr>
                  </thead>
                  <tbody
                    class="divide-y divide-gray-200 dark:divide-gray-600"
                    id="clients-tbody-desktop"
                  >
                    <tr>
                      <td
                        colspan="6"
                        class="text-center py-8 text-gray-500 dark:text-gray-400"
                      >
                        <svg
                          class="animate-spin h-8 w-8 mx-auto mb-2"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle
                            class="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            stroke-width="4"></circle>
                          <path
                            class="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                          ></path>
                        </svg>
                        Cargando clientes...
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>

        <!-- Mobile Card View (visible only on mobile) -->
        <div class="sm:hidden">
          <div id="clients-cards-mobile" class="space-y-4">
            <div class="text-center py-8 text-gray-500 dark:text-gray-400">
              <svg
                class="animate-spin h-8 w-8 mx-auto mb-2"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Cargando clientes...
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Client Modal -->
    <div
      id="client-modal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50"
    >
      <div
        class="relative top-5 sm:top-20 mx-auto p-4 sm:p-5 border dark:border-gray-700 w-11/12 sm:w-96 shadow-lg rounded-md bg-white dark:bg-gray-800 custom-scrollbar"
      >
        <!-- Close button for mobile -->
        <button
          type="button"
          id="modal-close-btn"
          class="absolute top-2 right-2 text-gray-400 hover:text-gray-500 sm:hidden"
          aria-label="Cerrar"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>

        <div class="mt-3">
          <h3
            class="text-xl font-medium text-gray-900 dark:text-white mb-4 pr-8 sm:pr-0"
            id="modal-title"
          >
            Nuevo Cliente
          </h3>
          <form id="client-form" class="space-y-4">
            <Input id="client-nombre" required label="Nombre" />
            <Input id="client-empresa" label="Empresa" />
            <Input id="client-email" type="email" label="Email" />
            <Input id="client-telefono" type="tel" label="Teléfono" />
            <Textarea id="client-direccion" rows={2} label="Dirección" />
            <div class="flex items-center py-2 touch-scroll-item">
              <input
                id="client-activo"
                type="checkbox"
                checked
                class="h-5 w-5 sm:h-4 sm:w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 rounded"
              />
              <label
                for="client-activo"
                class="ml-2 block text-sm text-gray-900 dark:text-gray-100"
                >Cliente activo</label
              >
            </div>
          </form>
          <div
            class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 gap-3 sm:gap-0 mt-6 pt-4 border-t border-gray-200 dark:border-gray-700"
          >
            <button
              id="cancel-client-btn"
              type="button"
              class="w-full sm:w-auto bg-white dark:bg-gray-700 py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 touch-scroll-item"
            >
              Cancelar
            </button>
            <button
              id="save-client-btn"
              type="submit"
              class="w-full sm:w-auto bg-primary-600 border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 touch-scroll-item"
            >
              Guardar
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
    >
      <div
        class="bg-white dark:bg-gray-800 rounded-lg p-6 sm:p-8 max-w-sm w-full mx-4"
      >
        <div class="text-center">
          <svg
            class="animate-spin h-12 w-12 mx-auto mb-4 text-primary-600"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            Procesando...
          </h3>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            Conectando con Firebase
          </p>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { notifications } from "../utils/notifications.js";

    let allClients: any[] = [];
    let editingClient: any = null;

    // Show/Hide loading
    function showLoading() {
      const overlay = document.getElementById("loading-overlay");
      if (overlay) {
        overlay.classList.remove("hidden");
        overlay.classList.add("flex");
      }
    }

    function hideLoading() {
      const overlay = document.getElementById("loading-overlay");
      if (overlay) {
        overlay.classList.add("hidden");
        overlay.classList.remove("flex");
      }
    }

    // Show/Hide modal
    function showModal() {
      document.getElementById("client-modal")?.classList.remove("hidden");
      // Prevent body scroll when modal is open
      document.body.style.overflow = "hidden";

      // Focus first input for accessibility
      setTimeout(() => {
        const firstInput = document.querySelector(
          "#client-form input"
        ) as HTMLElement;
        firstInput?.focus();
      }, 100);
    }

    function hideModal() {
      document.getElementById("client-modal")?.classList.add("hidden");
      // Restore body scroll
      document.body.style.overflow = "";
      clearForm();
      editingClient = null;
    }

    // Clear form
    function clearForm() {
      (document.getElementById("client-nombre") as HTMLInputElement).value = "";
      (document.getElementById("client-empresa") as HTMLInputElement).value =
        "";
      (document.getElementById("client-email") as HTMLInputElement).value = "";
      (document.getElementById("client-telefono") as HTMLInputElement).value =
        "";
      (
        document.getElementById("client-direccion") as HTMLTextAreaElement
      ).value = "";
      (document.getElementById("client-activo") as HTMLInputElement).checked =
        true;
    }

    // Load clients from API with quote counts
    async function loadClients() {
      try {
        showLoading();

        const response = await fetch("/api/clients?includeQuoteCount=true");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        allClients = await response.json();

        console.log("Clientes cargados:", allClients.length);
        renderClients(allClients);
        updateStats();
        hideLoading();
      } catch (error) {
        console.error("Error loading clients:", error);
        showError(
          "Error al cargar los clientes: " +
            (error instanceof Error ? error.message : String(error))
        );
        hideLoading();
      }
    }

    // Render clients in table and mobile cards
    function renderClients(clients: any[]) {
      // Get both containers
      const tbodyDesktop = document.getElementById("clients-tbody-desktop");
      const mobileCards = document.getElementById("clients-cards-mobile");

      if (!tbodyDesktop || !mobileCards) return;

      if (clients.length === 0) {
        // Empty state for desktop
        tbodyDesktop.innerHTML = `
        <tr>
          <td colspan="6" class="text-center py-8 text-gray-500 dark:text-gray-400">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No se encontraron clientes</h3>
            <p class="text-gray-500 dark:text-gray-400">Comienza agregando tu primer cliente.</p>
          </td>
        </tr>
        `;

        // Empty state for mobile
        mobileCards.innerHTML = `
        <div class="text-center py-8 text-gray-500 dark:text-gray-400">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No se encontraron clientes</h3>
          <p class="text-gray-500 dark:text-gray-400">Comienza agregando tu primer cliente.</p>
        </div>
        `;
        return;
      }

      // Render desktop view
      tbodyDesktop.innerHTML = clients
        .map((client) => {
          return `
          <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
            <td class="py-4 pl-4 pr-3 text-sm sm:pl-0">
              <div class="flex flex-col">
                <div class="font-medium text-gray-900 dark:text-white">${client.nombre || "Sin nombre"}</div>
                <div class="text-gray-500 dark:text-gray-400 text-xs mt-1">${client.email || "Sin email"}</div>
              </div>
            </td>
            <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${client.empresa || "Sin empresa"}
            </td>
            <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              <div class="flex flex-col">
                <div>${client.telefono || "Sin teléfono"}</div>
                <div class="text-xs text-gray-400 dark:text-gray-500">${client.direccion || "Sin dirección"}</div>
              </div>
            </td>
            <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                (client.cotizaciones || 0) > 0
                  ? "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
                  : "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300"
              }">
                ${client.cotizaciones || 0} cotizaciones
              </span>
            </td>
            <td class="px-3 py-4 text-sm">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                client.activo
                  ? "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200"
                  : "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200"
              }">
                ${client.activo ? "Activo" : "Inactivo"}
              </span>
            </td>
            <td class="px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              <div class="flex space-x-2">
                <button class="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300 edit-client" data-id="${client.id}">
                  Editar
                </button>
                <button class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 delete-client" data-id="${client.id}">
                  Eliminar
                </button>
              </div>
            </td>
          </tr>
        `;
        })
        .join("");

      // Render mobile cards
      mobileCards.innerHTML = clients
        .map((client) => {
          return `
          <div class="bg-white dark:bg-gray-700 rounded-lg shadow p-4 touch-scroll-item">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h3 class="text-base font-medium text-gray-900 dark:text-white">${client.nombre || "Sin nombre"}</h3>
                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">${client.email || "Sin email"}</p>
              </div>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                client.activo
                  ? "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200"
                  : "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200"
              }">
                ${client.activo ? "Activo" : "Inactivo"}
              </span>
            </div>
            
            <div class="mt-4 grid grid-cols-2 gap-y-2 text-sm">
              <div>
                <span class="block text-xs text-gray-500 dark:text-gray-400">Empresa</span>
                <span class="text-gray-700 dark:text-gray-300">${client.empresa || "Sin empresa"}</span>
              </div>
              <div>
                <span class="block text-xs text-gray-500 dark:text-gray-400">Teléfono</span>
                <span class="text-gray-700 dark:text-gray-300">${client.telefono || "Sin teléfono"}</span>
              </div>
              <div class="col-span-2">
                <span class="block text-xs text-gray-500 dark:text-gray-400">Dirección</span>
                <span class="text-gray-700 dark:text-gray-300 text-sm">${client.direccion || "Sin dirección"}</span>
              </div>
              <div>
                <span class="block text-xs text-gray-500 dark:text-gray-400">Cotizaciones</span>
                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                  (client.cotizaciones || 0) > 0
                    ? "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
                    : "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300"
                }">
                  ${client.cotizaciones || 0} cotizaciones
                </span>
              </div>
            </div>
            
            <div class="mt-4 pt-3 border-t border-gray-200 dark:border-gray-600 flex justify-end space-x-3">
              <button class="py-2 px-3 text-sm font-medium text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300 edit-client" data-id="${client.id}">
                Editar
              </button>
              <button class="py-2 px-3 text-sm font-medium text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 delete-client" data-id="${client.id}">
                Eliminar
              </button>
            </div>
          </div>
          `;
        })
        .join("");

      // Add event listeners to action buttons (for both desktop and mobile)
      document.querySelectorAll(".edit-client").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const clientId = target?.getAttribute("data-id");
          if (clientId) {
            editClient(clientId);
          }
        });
      });

      document.querySelectorAll(".delete-client").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const clientId = target?.getAttribute("data-id");
          if (clientId) {
            deleteClient(clientId);
          }
        });
      });
    }

    // Update statistics
    function updateStats() {
      const totalClients = allClients.length;
      const activeClients = allClients.filter((client) => client.activo).length;
      const clientsWithQuotes = allClients.filter(
        (client) => (client.cotizaciones || 0) > 0
      ).length;
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const recentClients = allClients.filter((client) => {
        if (!client.createdAt) return false;
        // Handle different date formats from API
        let clientDate;
        if (typeof client.createdAt === "string") {
          clientDate = new Date(client.createdAt);
        } else if (client.createdAt.seconds) {
          clientDate = new Date(client.createdAt.seconds * 1000);
        } else {
          clientDate = new Date(client.createdAt);
        }
        return clientDate >= thirtyDaysAgo;
      }).length;

      document.getElementById("total-clients")!.textContent =
        totalClients.toString();
      document.getElementById("active-clients")!.textContent =
        activeClients.toString();
      document.getElementById("clients-with-quotes")!.textContent =
        clientsWithQuotes.toString();
      document.getElementById("recent-clients")!.textContent =
        recentClients.toString();
    }

    // Show error message
    function showError(message: string) {
      // For desktop view
      const tbodyDesktop = document.getElementById("clients-tbody-desktop");
      if (tbodyDesktop) {
        tbodyDesktop.innerHTML = `
        <tr>
          <td colspan="6" class="text-center py-8 text-red-500">
            <svg class="w-12 h-12 mx-auto mb-4 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
            <h3 class="text-lg font-medium text-red-900 mb-2">Error</h3>
            <p class="text-red-700">${message}</p>
            <div class="mt-4">
              <a href="/quick-fix-firestore" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded font-bold">
                🔒 Arreglar Firebase
              </a>
            </div>
          </td>
        </tr>
      `;
      }

      // For mobile view
      const mobileCards = document.getElementById("clients-cards-mobile");
      if (mobileCards) {
        mobileCards.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
          <h3 class="text-lg font-medium text-red-900 mb-2">Error</h3>
          <p class="text-red-700">${message}</p>
          <div class="mt-4">
            <a href="/quick-fix-firestore" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded font-bold">
              🔒 Arreglar Firebase
            </a>
          </div>
        </div>
      `;
      }
    }

    // Filter functionality
    function filterClients() {
      const search =
        (
          document.getElementById("search") as HTMLInputElement
        )?.value.toLowerCase() || "";
      const status =
        (document.getElementById("status") as HTMLSelectElement)?.value || "";
      const company =
        (
          document.getElementById("company") as HTMLInputElement
        )?.value.toLowerCase() || "";

      let filtered = allClients.filter((client) => {
        const matchesSearch =
          !search ||
          client.nombre?.toLowerCase().includes(search) ||
          client.email?.toLowerCase().includes(search) ||
          client.empresa?.toLowerCase().includes(search);

        const matchesStatus =
          !status ||
          (status === "active" && client.activo) ||
          (status === "inactive" && !client.activo);

        const matchesCompany =
          !company || client.empresa?.toLowerCase().includes(company);

        return matchesSearch && matchesStatus && matchesCompany;
      });

      renderClients(filtered);
    }

    // Save client
    async function saveClient() {
      try {
        showLoading();

        const nombre = (
          document.getElementById("client-nombre") as HTMLInputElement
        ).value;
        const empresa = (
          document.getElementById("client-empresa") as HTMLInputElement
        ).value;
        const email = (
          document.getElementById("client-email") as HTMLInputElement
        ).value;
        const telefono = (
          document.getElementById("client-telefono") as HTMLInputElement
        ).value;
        const direccion = (
          document.getElementById("client-direccion") as HTMLTextAreaElement
        ).value;
        const activo = (
          document.getElementById("client-activo") as HTMLInputElement
        ).checked;

        const clientData = {
          nombre,
          empresa: empresa || "",
          email,
          telefono: telefono || "",
          direccion: direccion || "",
          activo,
          updatedAt: new Date(),
        };

        if (editingClient) {
          // Update existing client via API
          const response = await fetch(`/api/clients`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              id: editingClient.id,
              ...clientData,
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
        } else {
          // Create new client via API
          const response = await fetch("/api/clients", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(clientData),
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
        }

        hideModal();
        await loadClients();
        notifications.success(
          editingClient ? "¡Cliente actualizado!" : "¡Cliente creado!",
          editingClient
            ? "Los datos del cliente se han actualizado exitosamente"
            : "El nuevo cliente ha sido agregado al sistema"
        );
        hideLoading();
      } catch (error) {
        console.error("Error saving client:", error);
        notifications.error(
          "Error al guardar cliente",
          error instanceof Error ? error.message : String(error)
        );
        hideLoading();
      }
    }

    // Edit client
    function editClient(clientId: string) {
      const client = allClients.find((c) => c.id === clientId);
      if (!client) return;

      editingClient = client;

      (document.getElementById("client-nombre") as HTMLInputElement).value =
        client.nombre || "";
      (document.getElementById("client-empresa") as HTMLInputElement).value =
        client.empresa || "";
      (document.getElementById("client-email") as HTMLInputElement).value =
        client.email || "";
      (document.getElementById("client-telefono") as HTMLInputElement).value =
        client.telefono || "";
      (
        document.getElementById("client-direccion") as HTMLTextAreaElement
      ).value = client.direccion || "";
      (document.getElementById("client-activo") as HTMLInputElement).checked =
        client.activo !== false;

      document.getElementById("modal-title")!.textContent = "Editar Cliente";
      showModal();
    }

    // Delete client
    async function deleteClient(clientId: string) {
      const client = allClients.find((c) => c.id === clientId);
      const clientName = client
        ? `${client.nombre} - ${client.empresa}`
        : "este cliente";

      const result = await notifications.confirmDelete(clientName);
      if (!result.isConfirmed) return;

      try {
        notifications.loading("Eliminando cliente", "Por favor espera...");

        const response = await fetch("/api/clients", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id: clientId }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error || `HTTP error! status: ${response.status}`
          );
        }

        await loadClients();
        notifications.success(
          "¡Cliente eliminado!",
          "El cliente ha sido eliminado exitosamente"
        );
      } catch (error) {
        console.error("Error deleting client:", error);
        notifications.error(
          "Error al eliminar cliente",
          error instanceof Error ? error.message : String(error)
        );
      }
    }

    // Event listeners
    document.addEventListener("DOMContentLoaded", async () => {
      // Load initial data
      await loadClients();

      // Set up event listeners
      document
        .getElementById("search")
        ?.addEventListener("input", filterClients);
      document
        .getElementById("status")
        ?.addEventListener("change", filterClients);
      document
        .getElementById("company")
        ?.addEventListener("input", filterClients);

      document
        .getElementById("clear-filters")
        ?.addEventListener("click", () => {
          (document.getElementById("search") as HTMLInputElement).value = "";
          (document.getElementById("status") as HTMLSelectElement).value = "";
          (document.getElementById("company") as HTMLInputElement).value = "";
          filterClients();
        });

      document
        .getElementById("refresh-btn")
        ?.addEventListener("click", loadClients);

      document
        .getElementById("add-client-btn")
        ?.addEventListener("click", () => {
          document.getElementById("modal-title")!.textContent = "Nuevo Cliente";
          showModal();
        });

      document
        .getElementById("cancel-client-btn")
        ?.addEventListener("click", hideModal);

      document
        .getElementById("modal-close-btn")
        ?.addEventListener("click", hideModal);
      document
        .getElementById("save-client-btn")
        ?.addEventListener("click", saveClient);

      // Close modal when clicking outside
      document
        .getElementById("client-modal")
        ?.addEventListener("click", (e) => {
          if (e.target === document.getElementById("client-modal")) {
            hideModal();
          }
        });
    });
  </script>
</Dashboard>

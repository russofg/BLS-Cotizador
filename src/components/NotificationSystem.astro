---
// Componente global para el sistema de notificaciones
---

<div
  id="notification-container"
  class="fixed top-4 right-4 z-50 space-y-2 pointer-events-none"
>
  <!-- Las notificaciones se insertarán aquí dinámicamente -->
</div>

<script>
  // Sistema global de notificaciones
  class NotificationSystem {
    private container: HTMLElement | null = null;
    private notifications: Map<string, HTMLElement> = new Map();

    constructor() {
      this.container = document.getElementById("notification-container");
      this.init();
    }

    private init() {
      // Solicitar permisos para notificaciones push
      if ("Notification" in window && Notification.permission === "default") {
        Notification.requestPermission();
      }
    }

    /**
     * Muestra una notificación en pantalla
     */
    show(
      message: string,
      type: "success" | "error" | "info" | "warning" = "info",
      duration: number = 5000
    ) {
      const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      const notification = document.createElement("div");
      notification.id = id;
      notification.className = `pointer-events-auto transform transition-all duration-300 translate-x-full ${
        type === "success"
          ? "bg-green-500 text-white"
          : type === "error"
            ? "bg-red-500 text-white"
            : type === "warning"
              ? "bg-orange-500 text-white"
              : "bg-blue-500 text-white"
      } p-4 rounded-lg shadow-lg max-w-sm`;

      notification.innerHTML = `
        <div class="flex items-center space-x-3">
          <div class="flex-shrink-0">
            ${
              type === "success"
                ? "✅"
                : type === "error"
                  ? "❌"
                  : type === "warning"
                    ? "⚠️"
                    : "ℹ️"
            }
          </div>
          <div class="flex-1">
            <p class="text-sm font-medium">${message}</p>
          </div>
          <button onclick="window.notificationSystem?.remove('${id}')" class="flex-shrink-0 text-white hover:text-gray-200 transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;

      if (this.container) {
        this.container.appendChild(notification);
        this.notifications.set(id, notification);

        // Animar entrada
        setTimeout(() => {
          notification.classList.remove("translate-x-full");
        }, 100);

        // Auto-remover después del tiempo especificado
        if (duration > 0) {
          setTimeout(() => {
            this.remove(id);
          }, duration);
        }
      }
    }

    /**
     * Remueve una notificación específica
     */
    remove(id: string) {
      const notification = this.notifications.get(id);
      if (notification) {
        notification.classList.add("translate-x-full");
        setTimeout(() => {
          notification.remove();
          this.notifications.delete(id);
        }, 300);
      }
    }

    /**
     * Limpia todas las notificaciones
     */
    clear() {
      this.notifications.forEach((notification, id) => {
        this.remove(id);
      });
    }

    /**
     * Muestra notificación push del navegador
     */
    showPushNotification(
      title: string,
      message: string,
      options?: NotificationOptions
    ) {
      if ("Notification" in window && Notification.permission === "granted") {
        const notification = new Notification(title, {
          body: message,
          icon: "/favicon.svg",
          badge: "/favicon.svg",
          ...options,
        });

        // Auto-cerrar después de 5 segundos
        setTimeout(() => {
          notification.close();
        }, 5000);

        return notification;
      }
      return null;
    }

    /**
     * Verifica recordatorios pendientes
     */
    async checkPendingReminders() {
      try {
        const response = await fetch("/api/quote-tracking?action=stats");
        if (response.ok) {
          const stats = await response.json();

          // Mostrar notificación si hay seguimientos pendientes
          if (
            stats.seguimientosPendientes &&
            stats.seguimientosPendientes.length > 0
          ) {
            this.show(
              `Tienes ${stats.seguimientosPendientes.length} seguimientos pendientes`,
              "warning",
              10000
            );

            this.showPushNotification(
              "Seguimientos Pendientes",
              `Tienes ${stats.seguimientosPendientes.length} seguimientos de cotizaciones pendientes`
            );
          }

          // Mostrar notificación si hay cotizaciones próximas a vencer
          if (
            stats.proximosVencimientos &&
            stats.proximosVencimientos.length > 0
          ) {
            this.show(
              `${stats.proximosVencimientos.length} cotizaciones próximas a vencer`,
              "warning",
              10000
            );
          }
        }
      } catch (error) {
        console.error("Error checking pending reminders:", error);
      }
    }
  }

  // Inicializar sistema global de notificaciones
  window.notificationSystem = new NotificationSystem();

  // Verificar recordatorios cada 5 minutos
  setInterval(
    () => {
      window.notificationSystem?.checkPendingReminders();
    },
    5 * 60 * 1000
  );

  // Verificar recordatorios al cargar la página
  setTimeout(() => {
    window.notificationSystem?.checkPendingReminders();
  }, 2000);

  // Función global para mostrar notificaciones desde cualquier parte de la app
  window.showNotification = (
    message: string,
    type?: "success" | "error" | "info" | "warning"
  ) => {
    window.notificationSystem?.show(message, type);
  };

  // Función global para mostrar notificaciones push
  window.showPushNotification = (title: string, message: string) => {
    window.notificationSystem?.showPushNotification(title, message);
  };
</script>

<style>
  #notification-container {
    max-height: 80vh;
    overflow-y: auto;
  }

  #notification-container::-webkit-scrollbar {
    width: 4px;
  }

  #notification-container::-webkit-scrollbar-track {
    background: transparent;
  }

  #notification-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
  }
</style>

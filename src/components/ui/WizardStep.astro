---
interface Props {
  title: string;
  step: number;
  totalSteps: number;
  isActive?: boolean;
  isCompleted?: boolean;
  class?: string;
}

const {
  title,
  step,
  totalSteps,
  isActive = false,
  isCompleted = false,
  class: className = "",
} = Astro.props;

const stepClasses = `
  flex items-center space-x-3 p-4 rounded-lg transition-all
  ${isActive ? "bg-primary-50 border-2 border-primary-200" : "bg-gray-50 border-2 border-gray-200"}
  ${isCompleted ? "bg-green-50 border-2 border-green-200" : ""}
  ${className}
`;
---

<div class={stepClasses}>
  <div
    class={`
    flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium
    ${
      isCompleted
        ? "bg-green-500 text-white"
        : isActive
          ? "bg-primary-500 text-white"
          : "bg-gray-300 text-gray-600"
    }
  `}
  >
    {
      isCompleted ? (
        <svg
          class="w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 13l4 4L19 7"
          />
        </svg>
      ) : (
        step
      )
    }
  </div>

  <div class="flex-1">
    <h3
      class={`text-sm font-medium ${isActive ? "text-primary-900" : "text-gray-700"}`}
    >
      {title}
    </h3>
    <p class="text-xs text-gray-500">Paso {step} de {totalSteps}</p>
  </div>

  {
    isActive && (
      <div class="flex items-center">
        <svg
          class="w-4 h-4 text-primary-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"
          />
        </svg>
      </div>
    )
  }
</div>

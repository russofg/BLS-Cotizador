---
interface Props {
  currentMode: "light" | "dark" | "auto";
  onChange?: (mode: "light" | "dark" | "auto") => void;
  id?: string;
}

const { currentMode, onChange, id } = Astro.props;
---

<div class="space-y-3">
  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Modo de Tema
  </label>
  <div class="grid grid-cols-3 gap-2">
    <!-- Light Mode -->
    <button
      type="button"
      id="theme-light"
      class={`p-3 border-2 rounded-lg transition-all duration-200 ${
        currentMode === "light"
          ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
          : "border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600"
      }`}
    >
      <div class="flex flex-col items-center space-y-2">
        <div
          class="w-8 h-8 bg-white border border-gray-300 rounded flex items-center justify-center"
        >
          <svg
            class="w-4 h-4 text-yellow-500"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
        <span class="text-xs font-medium text-gray-700 dark:text-gray-300"
          >Claro</span
        >
      </div>
    </button>

    <!-- Dark Mode -->
    <button
      type="button"
      id="theme-dark"
      class={`p-3 border-2 rounded-lg transition-all duration-200 ${
        currentMode === "dark"
          ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
          : "border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600"
      }`}
    >
      <div class="flex flex-col items-center space-y-2">
        <div
          class="w-8 h-8 bg-gray-800 border border-gray-600 rounded flex items-center justify-center"
        >
          <svg
            class="w-4 h-4 text-gray-300"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
            ></path>
          </svg>
        </div>
        <span class="text-xs font-medium text-gray-700 dark:text-gray-300"
          >Oscuro</span
        >
      </div>
    </button>

    <!-- Auto Mode -->
    <button
      type="button"
      id="theme-auto"
      class={`p-3 border-2 rounded-lg transition-all duration-200 ${
        currentMode === "auto"
          ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
          : "border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600"
      }`}
    >
      <div class="flex flex-col items-center space-y-2">
        <div
          class="w-8 h-8 bg-gradient-to-r from-white to-gray-800 border border-gray-300 rounded flex items-center justify-center"
        >
          <svg
            class="w-4 h-4 text-gray-600"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
        <span class="text-xs font-medium text-gray-700 dark:text-gray-300"
          >Auto</span
        >
      </div>
    </button>
  </div>
  <p class="text-xs text-gray-500 dark:text-gray-400">
    El modo autom√°tico usa la preferencia de tu sistema
  </p>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const lightBtn = document.getElementById("theme-light");
    const darkBtn = document.getElementById("theme-dark");
    const autoBtn = document.getElementById("theme-auto");

    if (lightBtn && darkBtn && autoBtn) {
      lightBtn.addEventListener("click", () => {
        window.dispatchEvent(
          new CustomEvent("themeChange", {
            detail: { mode: "light" },
          })
        );
      });

      darkBtn.addEventListener("click", () => {
        window.dispatchEvent(
          new CustomEvent("themeChange", {
            detail: { mode: "dark" },
          })
        );
      });

      autoBtn.addEventListener("click", () => {
        window.dispatchEvent(
          new CustomEvent("themeChange", {
            detail: { mode: "auto" },
          })
        );
      });
    }
  });
</script>

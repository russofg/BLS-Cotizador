---
interface Option {
  value: string | number;
  label: string;
  disabled?: boolean;
}

interface Props {
  name?: string;
  id?: string;
  required?: boolean;
  disabled?: boolean;
  class?: string;
  label?: string;
  helperText?: string;
  error?: string;
  options: Option[];
  value?: string | number;
  placeholder?: string;
}

const {
  name,
  id,
  required = false,
  disabled = false,
  class: className = "",
  label,
  helperText,
  error,
  options,
  value,
  placeholder,
} = Astro.props;

const baseClasses =
  "mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm dark:bg-gray-700 dark:text-white";
const errorClasses = error
  ? "border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500"
  : "";
const disabledClasses = disabled
  ? "bg-gray-50 dark:bg-gray-800 text-gray-500 dark:text-gray-400 cursor-not-allowed"
  : "";

const selectClasses = `${baseClasses} ${errorClasses} ${disabledClasses} ${className}`;
---

<div class="w-full">
  {
    label && (
      <label
        for={id}
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        {label}
        {required && <span class="text-red-500 dark:text-red-400 ml-1">*</span>}
      </label>
    )
  }

  <select
    name={name}
    id={id}
    required={required}
    disabled={disabled}
    class={selectClasses}
  >
    {placeholder && <option value="">{placeholder}</option>}

    {
      options.map((option) => (
        <option
          value={option.value}
          disabled={option.disabled}
          selected={value === option.value}
        >
          {option.label}
        </option>
      ))
    }
  </select>

  {
    helperText && !error && (
      <p class="mt-1 text-sm text-gray-500">{helperText}</p>
    )
  }

  {error && <p class="mt-1 text-sm text-red-600">{error}</p>}
</div>
